{"version":3,"sources":["sounds/boom.wav","sounds/clap.wav","sounds/electronic-ride.wav","sounds/harp.wav","sounds/hi-hats.wav","sounds/kick.wav","sounds/ride-bell.wav","sounds/snare.wav","sounds/tom.wav","components/Displayer/Displayer.js","components/Controls/Controls.js","components/Pad/Pad.js","components/Pads/Pads.js","components/App/buttons.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Displayer","props","id","soundName","Controls","undefined","textToShow","Pad","audioRef","React","createRef","divRef","handleClick","bind","play","removeTransition","this","isActive","current","className","audio","divToStyle","currentTime","then","catch","error","console","log","message","clickHandler","describe","onClick","ref","onTransitionEnd","text","src","audioSrc","Component","Pads","buttons","map","button","key","letter","buttonKey","soundSource","activeButton","boom","clap","electronicRide","harp","hiHats","kick","rideBell","snare","tom","App","state","pushbuttons","activeId","handleKeyDown","document","addEventListener","e","forEach","keyCode","setState","keyDownHandler","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1dc8671b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/boom.a5257aef.wav\";","module.exports = __webpack_public_path__ + \"static/media/clap.a306730a.wav\";","module.exports = __webpack_public_path__ + \"static/media/electronic-ride.a7f7fe83.wav\";","module.exports = __webpack_public_path__ + \"static/media/harp.863da6e2.wav\";","module.exports = __webpack_public_path__ + \"static/media/hi-hats.8a342bd7.wav\";","module.exports = __webpack_public_path__ + \"static/media/kick.987fa9f0.wav\";","module.exports = __webpack_public_path__ + \"static/media/ride-bell.fa7ac356.wav\";","module.exports = __webpack_public_path__ + \"static/media/snare.bc394356.wav\";","module.exports = __webpack_public_path__ + \"static/media/tom.5fa031fa.wav\";","import React from 'react';\r\n\r\nimport './Displayer.css';\r\n\r\nfunction Displayer(props) {\r\n  return (\r\n    <div id=\"display\" >\r\n      {props.soundName}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Displayer;\r\n","import React from 'react';\r\nimport Displayer from '../Displayer/Displayer';\r\n\r\nimport './Controls.css';\r\n\r\nfunction Controls(props) {\r\n  \r\n  return (\r\n    <div id=\"controls-container\">\r\n      <Displayer soundName={props.textToShow!==undefined ? props.textToShow.soundName : ''} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Controls;\r\n","import React from 'react';\r\n\r\nimport './Pad.css';\r\n\r\nclass Pad extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n  \r\n    this.audioRef = React.createRef();\r\n    this.divRef = React.createRef();\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.play = this.play.bind(this);\r\n    this.removeTransition = this.removeTransition.bind(this);\r\n  }\r\n\r\n  componentDidUpdate () {\r\n    if (this.props.isActive === true ) {\r\n      this.play();\r\n    }\r\n  }\r\n\r\n  removeTransition() {\r\n    const divToStyle = this.divRef.current;\r\n    divToStyle.className=\"\";\r\n  }\r\n\r\n  play () {\r\n    const audio = this.audioRef.current;\r\n    const divToStyle = this.divRef.current;\r\n    audio.currentTime = 0;\r\n    \r\n    divToStyle.className=\"active\";\r\n    audio.play()\r\n    .then ( ()=>{\r\n    })\r\n    .catch ( (error)=> {\r\n      console.log(error.message);\r\n    })\r\n  }\r\n\r\n  handleClick () {\r\n     this.props.clickHandler(this.props.id);\r\n     this.play();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"drum-pad\" id={this.props.describe} \r\n            onClick={this.handleClick} >\r\n        <div ref={this.divRef}\r\n              onTransitionEnd={this.removeTransition} >\r\n          <audio className=\"clip\" id={this.props.text} \r\n                  src={this.props.audioSrc} ref={this.audioRef} ></audio>\r\n\r\n          {this.props.text}\r\n        </div> \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Pad;\r\n","import React from 'react';\r\nimport Pad from '../Pad/Pad';\r\n\r\nimport './Pads.css';\r\n\r\nfunction Pads(props) {\r\n\r\n  return (\r\n    <div id=\"pads-container\">\r\n      {props.buttons.map((button, id) => {\r\n        return <Pad key={id}\r\n                    id={id}\r\n                    text={button.letter}\r\n                    buttonKey={button.key}\r\n                    audioSrc={button.soundSource}\r\n                    describe={button.soundName}\r\n                    isActive={ id === props.activeButton ? true : false}\r\n                    clickHandler={props.clickHandler} \r\n                    />\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pads;\r\n","import boom from '../../sounds/boom.wav';\r\nimport clap from '../../sounds/clap.wav';\r\nimport electronicRide from '../../sounds/electronic-ride.wav';\r\nimport harp from '../../sounds/harp.wav';\r\nimport hiHats from '../../sounds/hi-hats.wav';\r\nimport kick from '../../sounds/kick.wav';\r\nimport rideBell from '../../sounds/ride-bell.wav';\r\nimport snare from '../../sounds/snare.wav';\r\nimport tom from '../../sounds/tom.wav';\r\n\r\nconst buttons = [\r\n  { \r\n    letter: 'Q',\r\n    key: 81,\r\n    soundName: 'boom',\r\n    soundSource: boom\r\n  },\r\n  {\r\n    letter: 'W',\r\n    key: 87,\r\n    soundName: 'clap',\r\n    soundSource: clap,\r\n  },\r\n  {\r\n    letter: 'E',\r\n    key: 69,\r\n    soundName: 'electronic-ride',\r\n    soundSource: electronicRide,\r\n  },\r\n  {\r\n    letter: 'A',\r\n    key: 65,\r\n    soundName: 'harp',\r\n    soundSource: harp,\r\n  },\r\n  {\r\n    letter: 'S',\r\n    key: 83,\r\n    soundName: 'hi-hats',\r\n    soundSource: hiHats,\r\n  },\r\n  {\r\n    letter: 'D',\r\n    key: 68,\r\n    soundName: 'kick',\r\n    soundSource: kick,\r\n  },\r\n  {\r\n    letter: 'Z',\r\n    key: 90,\r\n    soundName: 'ride-bell',\r\n    soundSource: rideBell,\r\n  },\r\n  {\r\n    letter: 'X',\r\n    key: 88,\r\n    soundName: 'snare',\r\n    soundSource: snare,\r\n  },\r\n  {\r\n    letter: 'C',\r\n    key: 67,\r\n    soundName: 'tom',\r\n    soundSource: tom,\r\n  },\r\n]\r\n\r\nexport default buttons;","import React from 'react';\nimport Controls from '../Controls/Controls';\nimport Pads from '../Pads/Pads';\nimport buttons from './buttons';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      pushbuttons: buttons,\n      activeId: null,\n    }\n\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount () {\n    document.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  handleKeyDown (e) {\n    this.state.pushbuttons.forEach((button,id) => {\n      if (button.key===e.keyCode) {\n        this.setState({ activeId: id });\n      }\n    });\n  }\n\n  handleClick (id) {\n   this.setState({ activeId: id });\n  }\n\n  render () {\n    return (\n      <div className=\"App\" >\n        <div id=\"drum-machine\" >\n          <Pads buttons={this.state.pushbuttons} \n                activeButton={this.state.activeId}\n                keyDownHandler={this.handleKeyDown}\n                clickHandler={this.handleClick} />\n          <Controls textToShow={this.state.pushbuttons[this.state.activeId]} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}